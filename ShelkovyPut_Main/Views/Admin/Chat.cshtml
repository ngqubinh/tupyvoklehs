@model IEnumerable<Domain.Models.Management.OMessage>

<div class="container mt-4">
    <h1 class="text-center mb-4">Admin Dashboard</h1>

    <div class="row">
        <div class="col-md-4">
            <h3>Danh sách khách hàng</h3>
            <ul id="customerList" class="list-group">
                @foreach (var customer in ViewBag.Customers)
                {
                    <li class="list-group-item">
                        <a href="#" class="customer-link" data-email="@customer.Email">@customer.Email</a>
                    </li>
                }
            </ul>
        </div>
        <div class="col-md-8">
            <h3>Chat</h3>
            <ul id="messagesList" class="list-group mb-3" style="display: none;">
            </ul>

            <form id="messageForm" class="needs-validation" novalidate style="display: none;">
                <input type="hidden" id="receiverEmail" />
                <div class="input-group">
                    <input type="text" id="messageInput" class="form-control" placeholder="Type your message here" required />
                    <div class="input-group-append">
                        <button id="sendButton" class="btn btn-primary" type="submit">Send</button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>
    <script>
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        document.getElementById("sendButton").disabled = true;

        connection.on("ReceiveMessage", (email, message) => {
            const msg = document.createElement("li");
            msg.classList.add("list-group-item");
            msg.innerHTML = `<strong>${email}</strong>: ${message}`;
            document.getElementById("messagesList").appendChild(msg);
        });

        connection.start().then(() => {
            document.getElementById("sendButton").disabled = false;
        }).catch(err => console.error(err.toString()));

        document.getElementById("messageForm").addEventListener("submit", event => {
            const messageInput = document.getElementById("messageInput").value;
            const receiverEmail = document.getElementById("receiverEmail").value;
            connection.invoke("SendMessage", receiverEmail, messageInput).catch(err => console.error(err.toString()));
            event.preventDefault();
            document.getElementById("messageInput").value = ''; // Clear the input field after sending
        });

        document.querySelectorAll('.customer-link').forEach(link => {
            link.addEventListener('click', event => {
                event.preventDefault();
                const email = event.target.dataset.email;
                document.getElementById("receiverEmail").value = email;

                // Show the message form and clear previous messages
                document.getElementById("messageForm").style.display = 'block';
                document.getElementById("messagesList").style.display = 'block';
                document.getElementById("messagesList").innerHTML = '';

                // Fetch and display messages for the selected customer
                fetch(`/Admin/GetMessagesByUser?email=${email}`)
                    .then(response => response.json())
                    .then(messages => {
                        messages.forEach(message => {
                            const msg = document.createElement("li");
                            msg.classList.add("list-group-item");
                            msg.innerHTML = `<strong>${message.sender}</strong>: ${message.text}`;
                            document.getElementById("messagesList").appendChild(msg);
                        });
                    }).catch(err => console.error(err.toString()));
            });
        });
    </script>
}

<style>
    body {
        background-color: #f8f9fa;
    }

    .container {
        background-color: #fff;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.1);
    }

    .list-group-item {
        transition: background-color 0.3s;
    }

    .list-group-item:hover {
        background-color: #e9ecef;
    }

    .form-control:invalid {
        border-color: #dc3545;
    }

    .form-control:valid {
        border-color: #28a745;
    }
</style>
